### Создание вложенных списков
'''
my_list = [[0], [1, 2], [3, 4, 5]]
'''
Создадим пустой список, потом n раз добавим в него новый элемент – список длины m, составленный из нулей:
'''
n, m = int(input()), int(input())    # считываем значения n и m
my_list = []

for _ in range(n):
    my_list.append([0] * m)
'''
Сначала создадим список из n элементов (для начала просто из n нулей). Затем сделаем каждый элемент списка ссылкой на
другой список из m элементов, заполненный нулями:
'''
n, m = int(input()), int(input())  # считываем значения n и m
my_list = [0] * n

for i in range(n):
    my_list[i] = [0] * m
'''
Можно использовать генератор списка: создадим список из n элементов, каждый из которых будет списком, состоящих из m нулей:
'''
n, m = int(input()), int(input())  # считываем значения n и m

my_list = [[0] * m for _ in range(n)]
'''

###Считывание вложенных списков

Если элементы списка вводятся через клавиатуру (каждая строка на отдельной строке, всего n строк,
числа в строке разделяются пробелами), для ввода списка можно использовать следующий код:
'''
n = 4                                         # количество строк (элементов)
my_list = []

for _ in range(n):
    elem = [int(i) for i in input().split()]  # создаем список из элементов строки
    my_list.append(elem)
'''

Перебор и вывод элементов вложенного списка
'''
my_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

for i in range(len(my_list)):
    for j in range(len(my_list[i])):
        print(my_list[i][j], end=' ')  # используем необязательный параметр end
    print()                            # перенос на новую строку
 Результатом работы такого кода будет:

1 2 3
4 5 6
7 8 9
'''

В предыдущем примере мы перебирали индексы элементов, а можно сразу перебирать сами элементы вложенного списка:
'''
my_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

for row in my_list:
    for elem in row:
        print(elem, end=' ')
    print()
 Результатом работы такого кода будет:

1 2 3
4 5 6
7 8 9
'''
Перебор элементов вложенного списка по индексам дает нам больше гибкости для вывода данных.
Например, поменяв порядок переменных i и j, мы получаем иной тип вывода:
'''
my_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

for i in range(len(my_list)):
    for j in range(len(my_list[i])):
        print(my_list[j][i], end=' ')  # выводим my_list[j][i] вместо my_list[i][j]
    print()
 Результатом работы такого кода будет:

1 4 7
2 5 8
3 6 9
'''

Обработка вложенных списков

Используем вложенный цикл для подсчета суммы всех чисел в списке:
'''
my_list = [[1, 9, 8, 7, 4], [7, 3, 4], [2, 1]]

total = 0
for i in range(len(my_list)):
    for j in range(len(my_list[i])):
        total += my_list[i][j]

print(total)
'''
Или то же самое с циклом не по индексу, а по значениям:
'''
my_list = [[1, 9, 8, 7, 4], [7, 3, 4], [2, 1]]

total = 0
for row in my_list:
    for elem in row:
        total += elem

print(total)
'''
Таким образом, можно обработать элементы вложенного списка практически в любом языке программирования. В Python, однако, можно упростить код, если использовать встроенную функцию sum(), которая принимает список чисел и возвращает его сумму. Подсчет суммы с помощью функции sum() выглядит так:
'''
my_list = [[1, 9, 8, 7, 4], [7, 3, 4], [2, 1]]

total = 0
for row in my_list:  # в один цикл
    total += sum(row)
print(total)
'''


